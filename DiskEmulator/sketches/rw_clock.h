// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------- //
// rw_clock //
// -------- //

#define rw_clock_wrap_target 0
#define rw_clock_wrap 1

static const uint16_t rw_clock_program_instructions[] = {
		//     .wrap_target
0xf701,	//  0: set    pins, 1                [23]
0xf700,	//  1: set    pins, 0                [23]
        //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rw_clock_program = {
	.instructions = rw_clock_program_instructions,
	.length = 2,
	.origin = -1,
};

static inline pio_sm_config rw_clock_program_get_default_config(uint offset) {
	pio_sm_config c = pio_get_default_sm_config();
	sm_config_set_wrap(&c, offset + rw_clock_wrap_target, offset + rw_clock_wrap);
	return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void rw_clock_program_init(PIO pio, uint sm, uint offset) 
{    
	pio_sm_config c = rw_clock_program_get_default_config(offset);
	sm_config_set_set_pins(&c, 14, 1);
	pio_sm_set_pindirs_with_mask(pio, sm, 1u << 14, 1u << 14);
	pio_sm_set_pins_with_mask(pio, sm, ~(1u << 14), 1u << 14); 
	pio_gpio_init(pio, 14);
	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

#endif
