// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// read_data //
// --------- //

#define read_data_wrap_target 0
#define read_data_wrap 3

static const uint16_t read_data_program_instructions[] = {
            //     .wrap_target
    0x2080, //  0: wait   1 gpio, 0                  
    0x200e, //  1: wait   0 gpio, 14                 
    0x208e, //  2: wait   1 gpio, 14                 
    0x6001, //  3: out    pins, 1                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program read_data_program = {
    .instructions = read_data_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config read_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + read_data_wrap_target, offset + read_data_wrap);
    return c;
}

#include "hardware/clocks.h"
#include "hardware/gpio.h"
static inline void read_data_program_init(PIO pio, uint sm, uint offset) 
{    
    pio_sm_config c = read_data_program_get_default_config(offset);
    sm_config_set_out_pins(&c, 13, 1);
    pio_sm_set_pindirs_with_mask(pio, sm, 1u << 13, 1u << 13);
    pio_sm_set_pins_with_mask(pio, sm, ~(1u << 13), 1u << 13); 
    pio_gpio_init(pio, 13);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_out_shift(&c, true, true, 8);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
static inline void read_data_putc(PIO pio, uint sm, char c) {
    pio_sm_put_blocking(pio, sm, c);
}

#endif

